# Generated by Django 5.2.4 on 2025-07-31 09:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DealerContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=15, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=80)),
                ('district', models.CharField(max_length=80)),
                ('state', models.CharField(max_length=80)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('contact_number', models.CharField(max_length=15, unique=True)),
                ('aadhar', models.FileField(blank=True, null=True, upload_to='documents/aadhar/')),
                ('license', models.FileField(blank=True, null=True, upload_to='documents/license/')),
                ('onboarded', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Rental',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rental_type', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month')], max_length=8)),
                ('pickup_date', models.DateField()),
                ('dropoff_date', models.DateField()),
                ('pickup_time', models.TimeField(blank=True, null=True)),
                ('dropoff_time', models.TimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('returned', 'Returned'), ('cancelled', 'Cancelled'), ('pending', 'Pending'), ('renewed', 'Renewed')], default='active', max_length=10)),
                ('ticket_id', models.CharField(max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('return_reason', models.TextField(blank=True, null=True)),
                ('returned', models.BooleanField(default=False)),
                ('dropoff_on_time', models.BooleanField(default=True)),
                ('dropoff_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dropoff_rentals', to='rental.location')),
                ('pickup_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pickup_rentals', to='rental.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rentals', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RenewalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_duration', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month')], max_length=8)),
                ('approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rental', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renewal_requests', to='rental.rental')),
            ],
        ),
        migrations.CreateModel(
            name='DropoffChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('new_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='new_dropoff_changes', to='rental.location')),
                ('old_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='old_dropoff_changes', to='rental.location')),
                ('rental', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dropoff_changes', to='rental.rental')),
            ],
        ),
        migrations.CreateModel(
            name='RentalStatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('from_status', models.CharField(choices=[('active', 'Active'), ('returned', 'Returned'), ('cancelled', 'Cancelled'), ('pending', 'Pending'), ('renewed', 'Renewed')], max_length=10)),
                ('to_status', models.CharField(choices=[('active', 'Active'), ('returned', 'Returned'), ('cancelled', 'Cancelled'), ('pending', 'Pending'), ('renewed', 'Renewed')], max_length=10)),
                ('rental', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_logs', to='rental.rental')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RentalTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('ticket_number', models.CharField(max_length=36, unique=True)),
                ('pickup_date', models.DateField()),
                ('dropoff_date', models.DateField()),
                ('vehicle_snapshot', models.JSONField()),
                ('dropoff_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_dropoffs', to='rental.location')),
                ('rental', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ticket', to='rental.rental')),
            ],
        ),
        migrations.CreateModel(
            name='ReturnRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('return_reason', models.TextField()),
                ('issue_reported', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('new_dropoff_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='return_requests', to='rental.location')),
                ('rental', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='return_request', to='rental.rental')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to='vehicle_images/')),
                ('type', models.CharField(choices=[('car', 'Car'), ('bike', 'Bike'), ('scooter', 'Scooter')], max_length=20)),
                ('year', models.PositiveIntegerField()),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], max_length=20)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], max_length=20)),
                ('power', models.CharField(max_length=30)),
                ('description', models.TextField(max_length=2000, verbose_name='Description')),
                ('price_daily', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Daily Price')),
                ('price_weekly', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Weekly Price')),
                ('price_monthly', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Monthly Price')),
                ('city', models.CharField(blank=True, max_length=80, null=True)),
                ('district', models.CharField(blank=True, max_length=80, null=True)),
                ('state', models.CharField(blank=True, max_length=80, null=True)),
                ('available', models.BooleanField(default=True)),
                ('stock_left', models.PositiveIntegerField(default=1)),
                ('location_tags', models.JSONField(blank=True, default=list)),
                ('mileage', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Mileage')),
                ('dealer_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rental.dealercontact')),
                ('dropoff_locations', models.ManyToManyField(blank=True, related_name='dropoff_vehicles', to='rental.location')),
                ('pickup_locations', models.ManyToManyField(blank=True, related_name='pickup_vehicles', to='rental.location')),
            ],
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', models.CharField(choices=[('license', 'Driving License'), ('age', 'Age Restriction'), ('citizen', 'Nationality'), ('deposit', 'Deposit Required'), ('helmet', 'Helmet Required')], max_length=30)),
                ('text', models.CharField(max_length=255)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='rental.vehicle')),
            ],
        ),
        migrations.AddField(
            model_name='rental',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rentals', to='rental.vehicle'),
        ),
    ]
